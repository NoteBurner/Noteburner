import json
import time
import requests
import re

from browsercookie import get_cookie
from pywidevine.clients.netflix.client import NetflixClient
from pywidevine.clients.netflix.config import NetflixConfig
from utils import getSystemProxies


class NetflixParser():
    def __init__(self,url,cookie):
        self.url = url
        self.cookie = cookie
        self.movieid = self._pick_up_movieid(url)

    def _pick_up_movieid(self,url):
        regex = r"https?://www.netflix.com/watch/([0-9]+).+"
        match_obj = re.match(regex,url)
        return match_obj.groups()[0]

    def fetch_metadata_movie(self):
        proxies = getSystemProxies()
        ts = int(round(time.time() * 1000))
        url = 'https://www.netflix.com/nq/website/memberapi/v4cfc34e6/metadata?movieid=' + self.movieid + '&imageFormat=webp&withSize=true&materialize=true&_=' + str(ts)
        req = requests.get(url, cookies=self.cookie, proxies=proxies)
        return json.loads(req.text)
    def get_track_and_init_info(self,session_id="",challengeBase64=""):
        nf_cfg = NetflixConfig(self.movieid, None, None, [], ['all'], None, None)
        nf_client = NetflixClient(nf_cfg)
        if nf_client.login() == False:
            exit(1)
        return nf_client.get_track_and_init_info(self.cookie,session_id,challengeBase64)




def parseCookieFile(cookiefile="www.netflix.com_cookies.txt"):
    """Parse a cookies.txt file and return a dictionary of key value pairs
    compatible with requests."""

    cookies = {}
    with open(cookiefile, 'r') as fp:
        for line in fp:
            if not re.match(r'^\#', line):
                lineFields = line.strip().split('\t')
                cookies[lineFields[5]] = lineFields[6]
    return cookies

def getTrackInfo(url,session_id="",challengeBase64=""):
    cookies = parseCookieFile()
    parser = NetflixParser(url, cookies)
    track_info = parser.get_track_and_init_info(session_id,challengeBase64)
    return track_info
if __name__ =="__main__":
    url = "https://www.netflix.com/watch/80231419?trackId=255824129&tctx=0%2C0%2CNAPA%40%40%7C2db68cf5-fe67-4ebb-a961-2b48bac932c1-1511764_titles%2F1%2F%2F%E5%B0%8F%E5%A7%90%E5%A5%BD%E7%99%BD%2F0%2F0%2CNAPA%40%40%7C2db68cf5-fe67-4ebb-a961-2b48bac932c1-1511764_titles%2F1%2F%2F%E5%B0%8F%E5%A7%90%E5%A5%BD%E7%99%BD%2F0%2F0%2Cunknown%2C%2C2db68cf5-fe67-4ebb-a961-2b48bac932c1-1511764%7C1%2CtitlesResults%2C80231419%2CVideo%3A80231419%2CminiDpPlayButton"
    session_id="09F02746A7F7EC0A17F1A79BBE380C3D"
    challengeBase64="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"
    cookies = get_cookie(url)
    parser = NetflixParser(url,cookies[0])
    #data = parser.fetch_metadata_movie()
    # track_info = parser.get_track_and_init_info()
    #print(data)
    track_info = getTrackInfo(url, session_id="130F5B179E3808393CF7245358DEE14C", challengeBase64="CAES6RwSLAoqChQIARIQAAAAAAVvYDgAAAAAAAAAABABGhCzPmg+ary4aB1iH/Z6zU6yGAEgADAVOKTsxZ0BQqwcChB0ZXN0Lm5ldGZsaXguY29tEhDlRLpAC8EPN9O2Nvi1T/tDGvAZ7i2euI9p9+eZ2omFBCcNmvypT4voHphWz7yR+aiD2cqcL2AjgJktURdFSasLg7Hnv4sbae/T8p1kXZsTEV1uArT6VoEkTMaJM4Z3Y9FghsDFKWKpkOfF8x0l3Vm8avdUURbvSNOumtFY7Ff4KfIYY9G/p3WENyl+0cwlnQNnTsDn1EDvhbillzDuOGXg2u+cRxdQBrsA9FUtg3NyQVvvpiW9+a1zFvXTNoI3XEA6ZvMIaN/jAdYjgj+2kyo7ARv5uE0IG7x7JCk+0+qVpF9MtreAedHQSVRNhanMbWkpyc4VN9S++yUpMJeVxyOtLAbKvBxH22bX8+6cniQ5aUvw11jmc75AC/y1cvX02vljsrxSwvpk0OSQwRLKY1WqBS8ui/ZuPKqUUHV1MBLOWJB5mcV2FCj7iyKOtyz8FWsCFUHdpA9JGmqnGtWYVPC4NM200tE/RZkhnykdGozC/Jr/Yub1LdOqDc0/LIeMCieeYza1gtAqOwNezLM1cHzDbf420B9sRXi5JMkytzJGDlpfnun3JO6ma74vVjHhGDiUz/RoXrb+b9zGfxlmu45dB0ZDyxrK3n2I9Pbx0N9dTnPqSfq2cn6iohEyCjxoeYxrWfbwc6UVyo5PS6oklXp9va1RXJyELgH8qmQzpzNYYGtrkl+wFknzDU5Wi8lWp7yg5pAG19h85gbc/QlPfckXgIetqY6/dphlw8C8HgOcpxG8HiuETA98wjnLvuu10e+FGNo3Vmg5e/6xlg6MbLUKaKpfdlokjVU+MDypUypqeNzZ2Du76I9HKfu/u6oCwwbclnC81PsBOaqyB5/BcvhnZ+qI4z15WVV/fnSSdKegBck7CHj8m2+BadPYI4b8e3EPDQBgHwHF11JNPMzC/LyEHUj32aQ8vMqmlx7P7I3uiu/38govGcxmrzIKwaqrhfveILhg+/WhIl5TBpU9q7oKhLcbnUphKe9nA5f5LKQ6pUkF45yGxHmzmAucxS9LYkWfc3Dbk4Pt6bZrlCX3RVpeXNb/Q/DLW68wX3tv0ZeSbTF8s0vyh63402t2sS1ZpuJkyiv0/IzJlv1UQZK/Lg8JzUdyfqCRyLrHHRbX90eghRFf3km0ZQujoC4IgUFedFGYZMC8cupDAN8lNb8MPBaQtRw8+L3STHWgJrgU7xTJLGPJzBQ/mEBt1K8KhZM5OJp9KwoKnqMQdkuzzeWIaxRNY51LYMlYQVOHlmUkUQXFn4LQcmEujU2W9MmyyRMs6YBK2MgU3KWWrONEk6READp8/redYX7lCwjX9UjP3M+KlI5xO0O4e55/+MOIVpsjLhuthI4god5VD6PbwW+EkV+6AHkgIbQNZGavdMmOT/HJetvSIy657W91P/oLxwKLnhoitas66X253/VwFH6ONacRmzBvfoEKWK+qzOhrvHE3HqM0zOmPjnCVefynfxzDb/9uFIGMFRNob28frD8DB/72fA2GuRPLeDN6QwUxWw8cAw6EW8syE2TtfjS1DjpdaU+TtJzawA/Hg/P7jc4sxYTgx0pgOvBoBLtqOMynJc7N99nWj23xJv8NKmxR0dUmJLYMmyKF7vDDaIOvnmjWMPOHQZBonTrv9Ckco8fLU/mGzbRlDDXhAOa+TOmxzGlzIst133+dKb33MJKgE6FvPwZOOxWlnLnECjpqLZU/fPtVg5OYBEFo0kl8ZOQzsHh8fmneyK0Oi+p5vG1DVhxwP8Kzsl0eE10msMd8XwABw1fRpn+lWS2ioBxXbSR+69Z79sxvGUdUdoOdvKISu6YB5+ejzhDGdOs6XNUYWwIKtl1ftnbtAAMxVM/HkstW8i6A0fK7x9IR6Mfo2CXHHhzkLqHoVc4M7TwhkMKbyJ3Ajr3RkaSZqGCNfxQ/8UPd76z73wK9AfJO2/UbssUbXGFbRVPAZ6OISXKuv+glxvn/CNnU/vhQNBAIRxE57V/G/Hg+OiyBv8P2fzOviTGPwXbBk+KGPYsneo0r947cS4Pj5oCgdQZ9B4apKL4HBemOJ6GsHBL6iDetJykQLK5sONsA/Ifc6Q1R2zmDlOfm6pHjQIEN09krwUGDroty+G2+FVlmr3GN5II+P2XgoWXvIDPjVU0bhbhQe+OUnSQwirfEMfV7Q5c1Web3i5+TXnld84RzjLJPiQe5quS1/DhhvWbC71GttPBFtgekUH1NxiNKpYlLFt6OvTrHSUBkYxewFKECG/Y1+1cf/dwNo2TPeuxO/KWrUZcSWzWp0dbDe8zAoBBOchc2YA69oVWHx2GpUMQ4XKrMFBnYOLdYjULG920z/QciNW+sPUM2EeEBpbj93cl/MC4dMw129kHWLKPaNlVO8j4Cig7INw5cqn9ICxYk6yNKaBwoNajbvbTFPMROCZNOki5upKpuz/AFqFd5Lo8bfdNbsd6et8uhNHLkdkFjfFT6eMe066SXA6SqTsyYHfbSTX6QBni9tK+EUIJrROMcGX1ndOBRFg0wI0GLSKMnfqOsENJZpqDrjo6mg02LcDHQdxBYYQEHjeRjJRN5i9K3QKwzhUdDnNxR3LOVgiOJxpjBndRLPoOihzuYNLZ7/+BuuwklsfmYDltRJuzY/bIn0yEKfFKKWlWg7sDK5i6PObUMhsaFKoue4+EiJWTGp5g3RtMZchp2Lt4ge8YijNCfi6LIUhNBL5V7UNhj2jNJFwwtrLpvj7YHmYDug7CxD6zrKGX146ydftSjD1HTXL+Mm4XPePHuAIVR0WTfqMkIIVA9PTPgsvnT2SgpwZCX95fdAfiypxKn9VdhhozZe3tsqk/Ji8i5BSPHtr3dLAu5TE65PR5B1sPxsvs/KSDHdALw1TI9+LPPuwr/4A8vCErbBRHbiVV+HmppCz0i4qMVLT6XElrwQVzhHlS8DF2H76S0ym9/wJsTEeXunj08mPJ6TXZ4cO/Uf9umHGcTU7yCNSOSxScpvgdCfhDV6eBduyupvt9gcUx0RBcixaMouwrz7lMx0vqW8tVrYUThmk9uSKYxSk2rpU5E2knVTZ3Agth/Tx9KET02iifIJyXBXZHNWdx2oie12C0L97A17dKmIa/fslqovJWdEU0pbrdYqRdkg1kdtQAntnr1dvV8ksSwplAM0Lm+k9oNQ0jTod1SAfj3hbkkpacTR179C5Aw2tIsPObigSn6S41QOEwNxjLOfigAs3OK1tHFEw5EJ+3BPLLCUXdW1BfqOvxPEu03xlbl5KmiMw6vXxSTNKDjV3KtnyCEQrTug0G8k4xJi53h0khIQ+LJHaw76brl1nEJVTnEwgBoc6OtON3H68km7QTVogiwYJFp5rlunWO2fBapFdz4FnxZheiRNOyJBCnJmXzrqQLY7b4UnAAWo5wJ2eK/D2ga5HPFVbMh3ScM5DxNKzZohcBPpvvdHD2A/4DjEMsKCJN9/7YMAmqKHJfbHqGAWzTAx+UXrtsVYG1BgC0k2lJ/Q5spK2fWzbQNCJZOalBzIrzQ6usAI6JTPJ9rhHv3Xr/kq1ZoG6m5fJbLz1vIDqZbGP9aqbHtmYhwg81lBrSiSLYvMOtoit4WckuFR9khhzdHgSV0RGRRmze4Coq4zx+FOh7kfOkwuTVgW6ZbywwZW6BA79He8ctHCHnnTXalSIAxINcBRESCO2gMjXuHI3q1QkqcuYKDNc5jjPqU7bOdnke1CvKuoTFuRBSnoH39eC2wnrztpwX++cYhy0tGwyH3vFaH4dw7NddVFlqEJ8hKKR0kGLMVVGrVP5dcWvXQiqhTzVnFc3WiU9pc1uz1OxVOHuDVl7pX362EG8Q/nQSCxoeih9CMNYilcwHjL6zzpyIjq/zbPX7seTWE3EENIKQVAI7MUto1V4vikfbsiqSvzhLvf6jF6MFJzcD8x6gJS4Gl6k/pk5U4aejFg0qu0Y2UDndrfhavODjj4jpLYCXO7GAUE+DJZ/imMthUGdwx1QbimsVGNg4JHXFJ9S9xSo9PsJ6zDole+UBaQFEqb1c3bgN9CS+E4ojMOGj4MI00yTsOUFb8ow7CEVlG252gmHlZBXWjTxj8QRZs9FTQ/B3VKiDE4BNa5nL5wiXnLbuqdOFSXaU4P4VzAbHXh1BYoNjajUYMkbQJYAj7OHy+RPfuxsKw+Anu2GLzV7dHda10UvNoig9tEgvfBspfs1XRis/aimJ0nLSS9lvRE5ZiJdwQYcRR5dPCAiEoU+okUmrSurNHS61xsuIyL3uwdwth82G0VFhdPJ07PG3mvE6xePnsrxqc8og4KNFr7ee5BMFbVz8Yyt3aJTKjE6Wxo0VCRuTwNhwrINTxilLL3BqjIhBubNDX3uxDeLwPG8oDdX0qpr3IdbrHabPF1S6uU42/pS0ODQAEXB4tB2GedvwO4WolhDIoj2oylbtmBQO31iIsw6+Y11/HIn0l9EsSX1IGFB9w0uMfIhC8Siwakns1CwSnOZia1/rIKoACy0fiSXFI7F4QsN+ofWc7xYya84NMddVVEccf9zIAGTbulsPmtNc0uWprTYl4DvLoZGv5PKzTmBqcEHyxVwpKV9AWATncGqoL5/G2WR3JAHgi9387eDd3J7+A6A42VBJhxd1ZLhJepw/iDJF2hXbt4Pnj4+VhhxizM4o+Lb58dpbJAh5Jg+dZZjCNplVL53HizUYsFqjH7cLBeX7StssvChwQvggf8Ia967Dfmr6TA6vBfsfCYj0LsiwA4ODTiDC4GIXc1SSxWmAwg87bJmVGzfD2tB47IP3UFpC7y7L3gdD/rasymKT52P8aK7YhBVhiIq+0Xjiu7KldOftHYVucnxqAAYiwgrjS8xCmFue+1v+ov5ABnmDzo/aTdv8yHO/ZACVLm5RRKH2n9rw+0Wq7JC5VUG4A1bBb0POOGf8b3j1T5ZKUn1tOnym8QhGwx2vLMLgfgParXSgt1F02Cch5vXT5J0aD51qEN8t78IQbVwMlK95xNz6UTzJCA7fM/Zh+lYAgShQAAAABAAAAFAAFABATsXYkLDl+3A==")
    print(json.dumps(track_info))
